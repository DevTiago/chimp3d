{"remainingRequest":"/Users/tiago/Code/chimp3d/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tiago/Code/chimp3d/src/views/blog/BlogDetails.vue?vue&type=template&id=50127bcd&","dependencies":[{"path":"/Users/tiago/Code/chimp3d/src/views/blog/BlogDetails.vue","mtime":1620745894000},{"path":"/Users/tiago/Code/chimp3d/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tiago/Code/chimp3d/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tiago/Code/chimp3d/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tiago/Code/chimp3d/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}