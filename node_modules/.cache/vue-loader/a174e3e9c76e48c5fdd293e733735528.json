{"remainingRequest":"/Users/tiago/Code/chimp3d/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tiago/Code/chimp3d/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/tiago/Code/chimp3d/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tiago/Code/chimp3d/src/views/all-home-version/StudioAgency.vue?vue&type=template&id=0fc8d26c&","dependencies":[{"path":"/Users/tiago/Code/chimp3d/src/views/all-home-version/StudioAgency.vue","mtime":1620024728000},{"path":"/Users/tiago/Code/chimp3d/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tiago/Code/chimp3d/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tiago/Code/chimp3d/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tiago/Code/chimp3d/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}